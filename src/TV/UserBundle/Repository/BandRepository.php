<?php

namespace TV\UserBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BandRepository extends \Doctrine\ORM\EntityRepository
{
    public function getBands($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->orderBy('a.id', 'DESC')
            ->getQuery()
        ;

        $query
            ->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage)
          ;
        return new Paginator($query, true);
    }
    
    public function getBandsWithFilters(\TV\FindyourbandBundle\Entity\Search $search)
    {
        $query = $this->createQueryBuilder('a')
            ->where('a.province = :province')
            ->setParameter('province', $search->getProvince())
            ->andWhere('a.genre = :genre')
            ->setParameter('genre', $search->getGenre())
            ->andWhere('a.level = :level')
            ->setParameter('level', $search->getLevel())
            ->orderBy('a.date', 'DESC')
            ->getQuery()
        ;

        return $query->getResult();
    }
    
    public function findFull($id){
        $qb = $this->createQueryBuilder('b');
        $qb->leftJoin('b.users', 'u')
                ->addSelect('u')
                ->where('b.id=:id')
                ->setParameter('id', $id)
                ;
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function getBandsHome()
    {
        $query = $this->createQueryBuilder('a')
            ->orderBy('a.date', 'DESC')
            ->setMaxResults(3)
            ->getQuery()
        ;

        return $query->getResult();
    }
    
    public function getBandsAdmin()
    {
        $query = $this->createQueryBuilder('a')
            ->orderBy('a.date', 'DESC')
            ->setMaxResults(20)
            ->getQuery()
        ;

        return $query->getResult();
    }
    
    public function getLikeQueryBuilder($user)
    {
        return $this
        ->createQueryBuilder('c')
        ->where('c.administrator = :user')
        ->setParameter('user', $user)
      ;
    }
}
